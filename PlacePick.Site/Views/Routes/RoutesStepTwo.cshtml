@model PlacePick.Site.Models.RouteModel

<div id="panel">
    <div id="color-palette"></div>
    <div>
        <button id="delete-button">Delete Selected Shape</button>
        <button id="get-points">Get Points</button>
        <button id="generate-kml">Generate KML</button>
        <button id="test">Test</button>
    </div>
</div>
<div id="map"></div>

<script>
    var drawingManager;
    var selectedShape;
    var colors = ['#1E90FF', '#FF1493', '#32CD32', '#FF8C00', '#4B0082'];
    var selectedColor;
    var colorButtons = {};
    var blutvene = [];
    var volstanding = [];
    var porownanie = null;


    function clearSelection() {
        if (selectedShape) {
            selectedShape.setEditable(false);
            selectedShape = null;
        }
    }

    function setSelection(shape) {
        clearSelection();
        selectedShape = shape;
        shape.setEditable(true);
        selectColor(shape.get('fillColor') || shape.get('strokeColor'));
    }

    function deleteSelectedShape() {
        if (selectedShape) {

            var temp = selectedShape.getPath();
            console.log(temp);
            for (var j = 0; j < temp.length; j++) {
                console.log(temp.getAt(j));
            }
            //selectedShape.setMap(null);
        }
    }

    function selectColor(color) {
        selectedColor = color;
        for (var i = 0; i < colors.length; ++i) {
            var currColor = colors[i];
            colorButtons[currColor].style.border = currColor == color ? '2px solid #789' : '2px solid #fff';
        }

        // Retrieves the current options from the drawing manager and replaces the
        // stroke or fill color as appropriate.
        var polylineOptions = drawingManager.get('polylineOptions');
        polylineOptions.strokeColor = color;
        drawingManager.set('polylineOptions', polylineOptions);

    }

    function setSelectedShapeColor(color) {
        if (selectedShape) {
            if (selectedShape.type == google.maps.drawing.OverlayType.POLYLINE) {
                selectedShape.set('strokeColor', color);
            } else {
                selectedShape.set('fillColor', color);
            }
        }
    }

    function makeColorButton(color) {
        var button = document.createElement('span');
        button.className = 'color-button';
        button.style.backgroundColor = color;
        google.maps.event.addDomListener(button, 'click', function () {
            selectColor(color);
            setSelectedShapeColor(color);
        });

        return button;
    }

    function buildColorPalette() {
        var colorPalette = document.getElementById('color-palette');
        for (var i = 0; i < colors.length; ++i) {
            var currColor = colors[i];
            var colorButton = makeColorButton(currColor);
            colorPalette.appendChild(colorButton);
            colorButtons[currColor] = colorButton;
        }
        selectColor(colors[0]);
    }

    function initialize() {
        var map = new google.maps.Map(document.getElementById('map'), {
            zoom: 11,
            /*center: new google.maps.LatLng(0.0, 0.0),*/
            center: new google.maps.LatLng(41.875696, -87.624207),
            mapTypeId: google.maps.MapTypeId.ROADMAP,
            disableDefaultUI: true,
            zoomControl: true
        });

        var polyOptions = {
            strokeWeight: 0,
            fillOpacity: 0.45,
            editable: true
        };
        // Creates a drawing manager attached to the map that allows the user to draw
        // markers, lines, and shapes.
        drawingManager = new google.maps.drawing.DrawingManager({
            drawingMode: null,
            drawingControl: true,
            drawingControlOptions: {
                position: google.maps.ControlPosition.TOP_CENTER,
                drawingModes: []
            },
            markerOptions: {
                draggable: true
            },
            polylineOptions: {
                clickable: true,
                editable: true
            },
            map: map
        });


        google.maps.event.addListener(drawingManager, 'overlaycomplete', function (e) {
            if (e.type != google.maps.drawing.OverlayType.MARKER) {
                // Switch back to non-drawing mode after drawing a shape.
                drawingManager.setDrawingMode(null);

                // Add an event listener that selects the newly-drawn shape when the user
                // mouses down on it.
                var newShape = e.overlay;
                newShape.type = e.type;
                google.maps.event.addListener(newShape, 'click', function () {
                    setSelection(newShape);
                });
                setSelection(newShape);
            }
        });


        google.maps.event.addDomListener(drawingManager, 'polylinecomplete', function (line) {
            blutvene.push(line);
            path = line.getPath();
            //console.log("Wypsiuje to co zaznaczone");
            for (var i = 0; i < path.length; i++) {
                //console.log(path.getAt(i));
            }
        });


        google.maps.event.addDomListener(drawingManager, 'markercomplete', function (marker) {
            //volstanding.push(marker.getPosition());
            volstanding.push(marker);
        });


        // Clear the current selection when the drawing mode is changed, or when the
        // map is clicked.
        google.maps.event.addListener(drawingManager, 'drawingmode_changed', clearSelection);
        google.maps.event.addListener(map, 'click', clearSelection);
        google.maps.event.addDomListener(document.getElementById('delete-button'), 'click', deleteSelectedShape);

        buildColorPalette();
        var kml = "@Html.Raw(@Model.KML)";
        var ctaLayer = new google.maps.KmlLayer({

            url: 'http://zacne.c0.pl/'+ kml +'.kml' + "?dummy=" + (new Date()).getTime()
        });
        ctaLayer.setMap(map);

        /* Add Points */

        var model = @Html.Raw(Json.Encode(Model));
        console.log("Tu wypisuje model");
        console.log(model.markerList);

        for(var i = 0; i < model.markerList.length; i++){

            var marker = new google.maps.Marker({
                position: new google.maps.LatLng(model.markerList[i].latitude, model.markerList[i].longitude),
                map: map,
                title: "You Are Here!"
            });

            google.maps.event.addListener(marker, 'click', function(e) {
                console.log(e);
            });
        }

        
    }

    $(document).ready(function () {
        initialize();

        $("#test").click(function () {

            for (var i = 0; i < volstanding.length; i++) {

                var temp = volstanding[i].getPosition();
                console.log(JSON.stringify(temp))
                console.log("Wypisuje " + i);
            }
        });
    });
</script>